{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textarea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","tag2","name","value","onClick","toggle","defaultChecked","htmlFor","theme","defaultProps","TextArea","useState","text","setText","words","split","filter","element","length","heading","onChange","event","target","rows","uppercase","toUpperCase","alert","disabled","lowercase","toLowerCase","word","i","up","charAt","lo","slice","newText","join","navigator","clipboard","writeText","readText","then","content","Alert","height","message","status","role","App","setMode","setAlert","setColor","alertMessage","msg","setTimeout","document","getElementById","checked","body","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d16b3ab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // let Style = {\r\n    //     color:\"black\",\r\n    //     backgroundColor:\"white\"\r\n    // }\r\n\r\n    // let darkStyle = {\r\n    //     color:\"white\",\r\n    //     backgroundColor:\"black\"\r\n    // }\r\n\r\n    // const [myStyle,setMyStyle] = useState(Style)\r\n    // const [btn, setBtn] = useState(\"Enable Dark Mode\")\r\n    \r\n    // const toggleChange = () =>{\r\n    //     // console.log(\"hsb\")\r\n    //     if(myStyle.backgroundColor==='white'){\r\n    //         setMyStyle(darkStyle);\r\n    //         setBtn(\"Enable Light Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle(Style);\r\n    //         setBtn(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n\r\n    let myStyle = {\r\n        color: props.mode==='light'?'black':'white',\r\n        backgroundColor: props.mode==='light'?'white':'black'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"my-3\" style={{color:props.mode==='light'?'black':'white'}}>About Us</h1>\r\n            <div className=\"accordion my-5\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                        Analize your text\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                        Free to use\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                        Browser Compitable\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleChange}>{btn}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n    // const [mode,setMode]=useState('light');\r\n    // const [txt,setTxt]=useState('Enable Dark Mode');\r\n    // const [labelColor, setLabelColor]=useState('text-secondary')\r\n\r\n    // const toggleMode=()=>{\r\n    //     if(mode==='light'){\r\n    //         setMode('dark');\r\n    //         setTxt('Enable Light Mode');\r\n    //         setLabelColor('text-light');\r\n    //         document.body.style.backgroundColor= 'black';\r\n    //         document.body.style.color= 'white';\r\n    //     }\r\n    //     else{\r\n    //         setMode('light');\r\n    //         setTxt('Enable Dark Mode');\r\n    //         setLabelColor('text-secondary')\r\n    //         document.body.style.backgroundColor= 'white';\r\n    //         document.body.style.color= 'black';\r\n    //     }\r\n    // }\r\n\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid \">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.tag2}</Link>\r\n                    </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n\r\n                {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggle}  />\r\n                    <label className={`form-check-label `}htmlFor=\"flexSwitchCheckDefault\" >Enable {props.mode==='light'?'Dark':'Light'} Mode</label>\r\n                </div> */}\r\n\r\n                <div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <input className=\"form-check-input bg-light\" type=\"radio\" name=\"inlineRadioOptions\" id=\"Radio1\" value=\"option1\" onClick={props.toggle} defaultChecked />\r\n                        <label className=\"form-check-label\" htmlFor=\"Radio1\"></label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <input className=\"form-check-input bg-dark\" type=\"radio\" name=\"inlineRadioOptions\" id=\"Radio2\" value=\"option1\" onClick={props.toggle}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"Radio2\"></label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <input className=\"form-check-input bg-primary\" type=\"radio\" name=\"inlineRadioOptions\" id=\"Radio3\" value=\"option1\" onClick={props.toggle}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"Radio3\"></label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <input className=\"form-check-input bg-success\" type=\"radio\" name=\"inlineRadioOptions\" id=\"Radio4\" value=\"option1\" onClick={props.toggle}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"Radio4\"></label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <input className=\"form-check-input bg-warning\" type=\"radio\" name=\"inlineRadioOptions\" id=\"Radio5\" value=\"option3\" onClick={props.toggle}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"Radio5\"></label>\r\n                    </div>\r\n                    <label className=\"form-check-label mx-3\" >Theme : {props.theme}</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    tag2: PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title: 'Title',\r\n    tag2: 'About'\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from \"react\";\r\n\r\n\r\nfunction TextArea(props){\r\n\r\n    const onChangeEvent = (event)=>{\r\n        // console.log(event.target.value);\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const handleUpclick = () => {\r\n        let uppercase= text.toUpperCase();\r\n        setText(uppercase);\r\n        // console.log(text.toUpperCase());\r\n        props.alert(\"Converted to Uppercase\",\"success\")\r\n    }\r\n    \r\n    const handleLoclick = () =>{\r\n        let lowercase = text.toLowerCase();\r\n        setText(lowercase);\r\n        props.alert(\"Converted to Lowercase\",\"success\")\r\n    }\r\n    const handleCaclick = () =>{\r\n        let small= text.toLowerCase();\r\n        let word=small.split(\" \");\r\n        for(let i=0; i<word.length; i+=1){\r\n            let up= word[i].charAt(0).toUpperCase();\r\n            let lo= word[i].slice(1);\r\n            word[i] = up+lo;\r\n            // setText(up+lo)\r\n        }\r\n        let newText = word.join(\" \");\r\n        setText(newText);\r\n        props.alert(\"Text Capitalized\",\"success\")\r\n    }\r\n    const handleCopy = () =>{\r\n        navigator.clipboard.writeText(text)\r\n        props.alert(\"Text Copied\",\"success\")\r\n    }\r\n    const handlePaste = () =>{\r\n        navigator.clipboard.readText().then(content=>{setText(content)})\r\n        // setText(content);\r\n        props.alert(\"Text Pasted\",\"success\")\r\n    }\r\n    const handleClear = () =>{\r\n        setText(\"\");\r\n        props.alert(\"Text Cleared\",\"success\")\r\n    }\r\n\r\n    const [text,setText]=useState(\"\");\r\n\r\n    let words = text.split(/\\s/).filter((element)=>{return element.length!==0}).length;\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"container my-3 \">\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                <textarea className={`form-control bg-${props.mode} text-${props.mode==='light'?'dark':'light'}`} id=\"mybox\" value={text} onChange={onChangeEvent} rows=\"8\" ></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handleUpclick} disabled={text.length===0}>\r\n                    Convert to Uppercase\r\n                </button>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handleLoclick} disabled={text.length===0}>\r\n                    Convert to Lowercase\r\n                </button>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handleCaclick} disabled={text.length===0}>\r\n                    Capitalize Text\r\n                </button>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handleCopy} disabled={text.length===0}>\r\n                    Copy Text\r\n                </button>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handlePaste}>\r\n                    Paste Text\r\n                </button>\r\n                <button className={`btn btn-${props.mode} mx-2 my-2`} onClick={handleClear} disabled={text.length===0}>\r\n                    Clear Text\r\n                </button>\r\n            </div>\r\n            <div className=\"container my-5\" >\r\n                <h3>Your Text Summary</h3>\r\n                <p>\r\n                    <b>{words}</b> Words and <b>{text.length}</b> Characters\r\n                </p>\r\n                <p>\r\n                    {0.008 * words} minutes read\r\n                </p>\r\n                <h4>Preview</h4>\r\n                <p>{text.length===0?\"Enter text in the textarea to preview!\":text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextArea.defaultProps={\r\n    heading:'Enter below'\r\n}\r\nexport default TextArea;","import React from 'react'\r\nfunction Alert(props) {\r\n    // let status = props.message.status.toLowerCase();\r\n    // return status.charAt(0).toUpperCase()+status.slice(1);\r\n    return(\r\n        <div className=\"container mt-3\" style={{height:'50px'}}>\r\n            {props.message && \r\n            <div className={`alert alert-${props.message.status} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.message.status.charAt(0).toUpperCase()+props.message.status.slice(1)}</strong> : {props.message.message}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","// import './App.css';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/Textarea';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [alert,setAlert]=useState(null);\n  const [color,setColor]=useState('light');\n  \n  const theme=()=>{\n    if(document.getElementById('Radio1').checked){\n      setMode('light');\n      setColor('Light');\n      document.body.style.backgroundColor= 'white';\n      document.body.style.color= 'black';\n      alertMessage(`Theme changed`,'success')\n      // console.log(color);\n\n    }\n    else if(document.getElementById('Radio2').checked){\n      setMode('dark');\n      setColor('Dark');\n      document.body.style.backgroundColor= 'black';\n      document.body.style.color= 'white';\n      alertMessage(`Theme changed`,'success')\n      // console.log(color);\n\n    }\n    else if(document.getElementById('Radio3').checked){\n      setMode('dark');\n      setColor('Blue');\n      document.body.style.backgroundColor= '#0e0640';\n      document.body.style.color= 'white';\n      alertMessage(`Theme changed`,'success')\n      // console.log(color);\n\n    }\n    else if(document.getElementById('Radio4').checked){\n      setMode('dark');\n      setColor('Green');\n      document.body.style.backgroundColor= '#01391C';\n      document.body.style.color= 'white';\n      alertMessage(`Theme changed`,'success')\n      // console.log(color);\n\n    }\n    else if(document.getElementById('Radio5').checked){\n      setMode('light');\n      setColor('Yellow');\n      document.body.style.backgroundColor= '#ffc900';\n      document.body.style.color= 'black';\n      alertMessage(`Theme changed `,'success')\n      // console.log(color);\n    }\n  }\n  \n  const alertMessage=(msg,status)=>{\n    setAlert({\n      message:msg,\n      status:status\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  return (\n    <Router>\n      <Navbar title=\"TextUtis\" tag2=\"About\" toggle={theme} mode={mode}  theme={color}/>\n      <Alert style={{height:'50px'}} message={alert}/>\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<TextArea heading=\"Enter the text to analize here\" mode={mode} alert={alertMessage}/>}/>\n            \n          <Route path=\"/about\" element={<About mode={mode}/>}  />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}